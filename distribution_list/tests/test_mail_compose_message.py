# -*- coding: utf-8 -*-
##############################################################################
#
#     This file is part of distribution_list, an Odoo module.
#
#     Copyright (c) 2015 ACSONE SA/NV (<http://acsone.eu>)
#
#     distribution_list is free software: you can redistribute it and/or
#     modify it under the terms of the GNU Affero General Public License
#     as published by the Free Software Foundation, either version 3 of
#     the License, or (at your option) any later version.
#
#     distribution_list is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU Affero General Public License for more details.
#
#     You should have received a copy of the
#     GNU Affero General Public License
#     along with distribution_list.
#     If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from uuid import uuid4

import openerp.tests.common as common


class TestMailComposeMessage(common.TransactionCase):

    def setUp(self):
        super(TestMailComposeMessage, self).setUp()

        self.partner_obj = self.registry['res.partner']
        self.mail_composer_obj = self.registry['mail.compose.message']
        self.distri_list_obj = self.registry['distribution.list']
        self.distri_list_line_obj = self.registry['distribution.list.line']
        self.mail_obj = self.registry['mail.mail']

        self.registry('ir.model').clear_caches()
        self.registry('ir.model.data').clear_caches()

    def test_send_mail_with_distribution_list(self):
        """
        Assure that resulting ids of distribution list are well computed and
        well used during the `send_mail` process of `mail.compose.message`
        """
        cr, uid, context = self.cr, self.uid, {}
        sample_values = uuid4()
        dst_model_id = self.registry('ir.model').search(
            self.cr, self.uid, [('model', '=', 'res.partner')])[0]

        email_test = '%s' % '%s@test.te' % (sample_values)

        partner_id = self.partner_obj.create(cr, uid, {
            'name': sample_values,
            'email': email_test,
            'notify_email': 'always',
        }, context=context)

        vals = {
            'name': '%s' % uuid4(),
            'domain': "[['name', '=', '%s']]" % sample_values,
            'src_model_id': dst_model_id,
        }

        distribution_list_line_id = self.distri_list_line_obj.create(
            cr, uid, vals, context=context)

        vals = {
            'name': '%s' % uuid4(),
            'dst_model_id': dst_model_id,
            'to_include_distribution_list_line_ids':
                [[4, distribution_list_line_id]],
        }
        distribution_list_id = self.distri_list_obj.create(
            cr, uid, vals, context=context)
        context['default_composition_mode'] = 'mass_mail'

        mail_composer_vals = {
            'email_from': email_test,
            'parent_id': False,
            'use_active_domain': False,
            'no_auto_thread': False,
            'partner_ids': [[6, False, []]],
            'notify': False,
            'distribution_list_id': distribution_list_id,
            'subject': "%s" % sample_values,
            'model': 'res.partner',
        }
        mail_composer_id = self.mail_composer_obj.create(
            cr, uid, mail_composer_vals, context=context)

        self.mail_composer_obj.send_mail(
            cr, uid, [mail_composer_id], context=context)

        mail_ids = self.mail_obj.search(
            cr, uid, [('subject', '=', '%s' % sample_values)],
            context=context)

        self.assertTrue(len(mail_ids) == 1, "Should have only one mail \
            generated by this mass mailing")
        mail_rec = self.mail_obj.browse(cr, uid, mail_ids[0], context=context)
        self.assertEqual(partner_id, mail_rec.res_id, "Should be the \
            partner_id defined into the distribution list")
